# Define environment variables
env:
  APP_REPO: "https://github.com/spring-projects/spring-petclinic.git"  # Public repository of the application
  IMAGE_NAME: "spring"  # Name of the Docker image
  GCR_REPO_REGION: "us-central1"  # Region of the GCR repository
  GCP_PROJECT_ID: "myspring-383620"  # ID of the GCP project
  GCR_REPO_NAME: "my-repository"  # Name of the GCR repository

# Define the name and trigger for the pipeline
name: Spring Petclinic Pipeline
on:
  push:
    branches:
      - chart
      - main

# Define the build job
jobs:
  build:
    runs-on: ubuntu-latest

    # Define the steps of the build job
    steps:
      - name: Checkout Branch  # Check out the specified branch
        uses: actions/checkout@v2
        with:
          ref: main  # Replace with the branch or tag you want to clone

      - name: Clone public repo of the application  # Clone the public repository of the application
        working-directory: docker
        run: |
          git clone ${{env.APP_REPO}}

      - name: Cache SonarCloud packages  # Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages  # Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze application code with Sonarcloud  # Build and analyze application code with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # SONAR_TOKEN was generated on sonarcloud.io and it's stored in Actions' Secret
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=team5-springpetclinic_springpetclinicteam5

      - name: Build Image from Dockerfile  # Build the Docker image from Dockerfile
        working-directory: docker
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: Tag Image  # Tag the Docker image
        run: |
          docker image tag ${{ env.IMAGE_NAME }}:latest ${{ env.GCR_REPO_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCR_REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Check if gcloud is installed  # Check if gcloud is installed
        run: gcloud version

      - name: Authenticate to Google account  # Authenticate to Google account
        working-directory: docker
        run: |
          echo ${{ secrets.SERVICE_ACCOUNT_BASE64 }} | base64 -d > service-account.json
          gcloud auth activate-service-account --key-file=service-account.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Authenticate to Artifact repository  # Authenticate to Artifact repository
        run: |
          gcloud auth configure-docker ${{ env.GCR_REPO_REGION }}-docker.pkg.dev
    

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GCR_REPO_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCR_REPO_NAME }}/${{ env.IMAGE_NAME }}:latest        
   